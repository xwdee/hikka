import aiohttp
import asyncio
from bs4 import BeautifulSoup
from difflib import get_close_matches
from telethon.tl.types import DocumentAttributeFilename
from .. import loader, utils
import os
import re

@loader.tds
class RecursiveFileDownloaderMod(loader.Module):
    """–ü—Ä–∏–¥—É–º–∞–ª: @artm1r  && –°–æ–∑–¥–∞–ª: ChatGPT
    –ú–æ–¥—É–ª—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Å —Å–∞–π—Ç–∞ heta.dan.tatar —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫—ç—à–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–ø–µ—á–∞—Ç–æ–∫"""
    strings = {"name": "NewHeta"}

    BASE_URL = "https://heta.dan.tatar/"
    MAX_DEPTH = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Ä–µ–∫—É—Ä—Å–∏–∏
    MODULES_PER_PAGE = 15  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–¥—É–ª–µ–π –Ω–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    folder_cache = {}  # –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤

    async def client_ready(self, client, db):
        self.client = client

    async def updatecachecmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .updatecache ‚Äî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤"""
        await message.edit("<b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫ –∏ –º–æ–¥—É–ª–µ–π...</b>")
        try:
            self.folder_cache = await self.build_folder_cache(self.BASE_URL, depth=0)
            await message.edit("<b>–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>")
        except Exception as e:
            await message.edit(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞: {str(e)}</b>")

    async def build_folder_cache(self, url, depth):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –æ–±—Ö–æ–¥ —Å–∞–π—Ç–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –≤—Å–µ—Ö –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤"""
        folder_cache = {}

        if depth > self.MAX_DEPTH:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É —Ä–µ–∫—É—Ä—Å–∏–∏
            return folder_cache

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status != 200:
                        return folder_cache

                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')

                    tasks = []
                    for link in soup.find_all('a'):
                        href = link.get('href')

                        if not href or href in ['/', '../']:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Å—ã–ª–∫–∏
                            continue

                        # –ï—Å–ª–∏ —ç—Ç–æ .py —Ñ–∞–π–ª
                        if href.endswith('.py'):
                            file_url = os.path.join(url, href)
                            filename = href.split("/")[-1]
                            author = url.split('/')[-2]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–≤—Ç–æ—Ä–∞ (–≥–ª–∞–≤–Ω–∞—è –ø–∞–ø–∫–∞)

                            if filename not in folder_cache:
                                folder_cache[filename] = {"urls": [file_url], "author": author}
                            else:
                                folder_cache[filename]["urls"].append(file_url)

                        # –ï—Å–ª–∏ —ç—Ç–æ –ø–∞–ø–∫–∞, –∏–¥–µ–º –≤–Ω—É—Ç—Ä—å
                        if href.endswith('/'):
                            new_url = os.path.join(url, href)
                            tasks.append(self.build_folder_cache(new_url, depth + 1))

                    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ–±—Ö–æ–¥—É –ø–∞–ø–æ–∫
                    results = await asyncio.gather(*tasks)

                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for result in results:
                        folder_cache.update(result)

            return folder_cache
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –∫—ç—à–∞: {str(e)}")
            return folder_cache

    async def modulecmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .module <–∏–º—è —Ñ–∞–π–ª–∞> ‚Äî –ü–æ–∏—Å–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–æ–¥—É–ª—è"""
        args = utils.get_args_raw(message)
        if not args:
            await message.edit("<b>–£–∫–∞–∂–∏—Ç–µ –∏–º—è –º–æ–¥—É–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞.</b>")
            return

        if not self.folder_cache:
            await message.edit("<b>–ö—ç—à –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É .updatecache –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞.</b>")
            return

        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if args in self.folder_cache:
            file_urls = self.folder_cache[args]["urls"]
            await self.send_files(message, args, file_urls)
        else:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–ø–µ—á–∞—Ç–æ–∫)
            close_matches = get_close_matches(args, self.folder_cache.keys(), n=3, cutoff=0.6)
            if close_matches:
                file_urls = self.folder_cache[close_matches[0]]["urls"]
                await self.send_files(message, close_matches[0], file_urls, match_info=close_matches[0])
            else:
                await message.edit(f"<b>–ú–æ–¥—É–ª—å —Å –∏–º–µ–Ω–µ–º '{args}' –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")

    async def send_files(self, message, filename, file_urls, match_info=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ —á–∞—Ç —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—É—Ç–∏ –∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º"""
        match_text = f"–ù–∞–π–¥–µ–Ω–æ –±–ª–∏–∂–∞–π—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {match_info}\n" if match_info else ""
        
        for file_url in file_urls:
            try:
                async with aiohttp.ClientSession() as session:
                    async with session.get(file_url) as response:
                        if response.status == 200:
                            file_content = await response.read()
                            file_name = file_url.split('/')[-1]

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è .py
                            if not file_name.endswith(".py"):
                                file_name += ".py"

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
                            await self.client.send_file(
                                entity=message.peer_id,
                                file=bytes(file_content),
                                caption=f"<b>NewHeta</b>\n{match_text}\n–ü—É—Ç—å: {file_url}",
                                reply_to=message.id,
                                force_document=True,
                                attributes=[DocumentAttributeFilename(file_name)]  # –£–∫–∞–∑–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                            )
                        else:
                            await message.edit(f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ: {file_url}</b>")
            except Exception as e:
                await message.edit(f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}</b>")

    async def folderscmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .folders <–∏–º—è –ø–∞–ø–∫–∏> ‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        args = utils.get_args_raw(message)

        if not args:
            # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –ø–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ –≥–ª–∞–≤–Ω—ã—Ö –ø–∞–ø–æ–∫
            main_folders = set(url.split('/')[3] for url_list in self.folder_cache.values() for url in url_list["urls"])
            folders_list = "\n".join(f"üìÅ {folder}" for folder in sorted(main_folders))
            await message.edit(f"<b>–ì–ª–∞–≤–Ω—ã–µ –ø–∞–ø–∫–∏:</b>\n\n{folders_list}")
        else:
            # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ
            folder_name = args.strip()
            matching_files = {
                filename: data for filename, data in self.folder_cache.items()
                if any(f"/{folder_name}/" in url for url in data["urls"])
            }

            if matching_files:
                files_list = "\n".join(f"üìÑ {filename}" for filename in sorted(matching_files.keys()))
                await message.edit(f"<b>–ú–æ–¥—É–ª–∏ –≤ –ø–∞–ø–∫–µ '{folder_name}':</b>\n\n{files_list}")
            else:
                await message.edit(f"<b>–ü–∞–ø–∫–∞ '{folder_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞.</b>")

    async def listcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .list <–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã> ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
        args = utils.get_args_raw(message)
        page = int(args) if args.isdigit() else 1

        if not self.folder_cache:
            await message.edit("<b>–ö—ç—à –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É .updatecache –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞.</b>")
            return

        modules = sorted(self.folder_cache.items())  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–æ–¥—É–ª–µ–π –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
        total_pages = (len(modules) + self.MODULES_PER_PAGE - 1) // self.MODULES_PER_PAGE

        if page > total_pages or page < 1:
            await message.edit(f"<b>–°—Ç—Ä–∞–Ω–∏—Ü—ã {page} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}</b>")
            return

        start_idx = (page - 1) * self.MODULES_PER_PAGE
        end_idx = start_idx + self.MODULES_PER_PAGE
        modules_on_page = modules[start_idx:end_idx]

        list_message = f"<b>–°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):</b>\n\n"
        for filename, data in modules_on_page:
            author = data["author"]
            list_message += f"üìÑ <b>{filename}</b> (–ê–≤—Ç–æ—Ä: {author})\n"

        sent_message = await message.edit(list_message)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
        await asyncio.sleep(60)
        await sent_message.delete()